import Head from "next/head";
import Link from "next/link";
import {useState} from "react";
import LoadBar from "~/components/LoadBar";

type Todo = {
  id: number;
  text: string;
  completed: boolean;
  thisSession: boolean;
  createdAt: Date;
  removalId?: NodeJS.Timeout;
  removalStart?: Date;
}

export default function Home() {
  const removalDelay = 6_000;

  const [todos, setTodos] = useState([] as Todo[]);
  const [sessionTodos, setSessionTodos] = useState(0);

  const addNewTodo = (text: string) => {
    if (text.length === 0)
      return;

    setTodos((prevState) => {
      setSessionTodos(sessionTodos + 1);

      return [{
        id: -sessionTodos,
        text,
        thisSession: true,
        completed: false,
        createdAt: new Date(),
        removalId: undefined,
        removalStart: undefined,
      }, ...prevState];
    });
  }

  const removeTodo = (id: number) => {
    setTodos((prevState) => {
      const removeIndex = prevState.findIndex((t) => t.id === id);
      const newArray = [...prevState];
      newArray.splice(removeIndex, 1);
      return newArray;
    });
  }

  const removeTodoDelayed = (id: number) => {
    const removalId = setTimeout(() => {
      removeTodo(id);
    }, removalDelay);

    setTodos((prevState) => {
      const newArray = [...prevState];
      const todo = prevState.find((t) => t.id === id)!;
      todo.removalId = removalId;
      todo.removalStart = new Date();
      return newArray;
    })
  };

  const stopRemoval = (id: number) => {
    setTodos((prevState) => {
      const newArray = [...prevState];
      const todo = prevState.find((t) => t.id === id)!;

      clearTimeout(todo.removalId);
      todo.removalId = undefined;
      todo.removalStart = undefined;
      return newArray;
    })
  };


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div className="min-h-screen" onClick={e => {
        // set focus on the input
        // find input
        const input = document.getElementById("theInput");
        input?.focus();
      }}>
        <div className="max-w-screen-sm w-full px-4 pt-10 m-auto">
          <header>
            <div className="text-center text-4xl font-bold">
              <h1>
                Todo App
              </h1>
            </div>
            <input maxLength={80} type="text" id="theInput" className="w-full my-10 p-4 text-4xl bg-gray-400 text-white"
                   onKeyUp={e => {
                     if (e.key === "Enter") {
                       const input = e.target as HTMLInputElement;
                       addNewTodo(input.value);
                       input.value = "";
                     }
                   }}/>
          </header>

          {/*todos*/}
          <div className="flex flex-col gap-4">
            {todos.map((todo, index) => {
              return <div key={todo.id} style={{
                textDecoration: todo.removalId !== undefined ? "underline" : "none",
                textUnderlineOffset: "-50%",
                textDecorationSkipInk: "none"
              }}>
                <div onPointerDown={e => e.preventDefault()} onClick={e => {
                  e.preventDefault();
                  e.stopPropagation();

                  const isBeingRemoved = todo.removalId !== undefined;
                  if (isBeingRemoved)
                    stopRemoval(todo.id)
                  else
                    removeTodoDelayed(todo.id);
                }}>
                  <input type="checkbox" className="hidden"/>
                  <label className="select-none text-2xl">{todo.text}</label>
                </div>
                { todo.removalId !== undefined && <LoadBar started={todo.removalStart!} duration={removalDelay}/>}
              </div>
            })}
          </div>

        </div>

      </div>
    </>
  );
}
